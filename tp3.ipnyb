from qiskit import QuantumCircuit, Aer, transpile
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram

def create_quantum_circuit(grimoire):
    circ = QuantumCircuit(2)
    circ.h(0)
    circ.h(1)
    circ.barrier()

    if grimoire == 1:
        circ.x(0)
        circ.x(1)
        circ.cz(0, 1)
        circ.x(0)
        circ.x(1)
        circ.barrier()
    elif grimoire == 2:
        circ.x(1)
        circ.cz(0, 1)
        circ.x(1)
        circ.barrier()
    elif grimoire == 3:
        circ.x(0)
        circ.cz(0, 1)
        circ.x(0)
        circ.barrier()
    elif grimoire == 4:
        circ.cz(0, 1)
        circ.barrier()
    else:
        raise ValueError("Value must be between 1 and 4")

    circ.h(0)
    circ.h(1)
    circ.z(0)
    circ.z(1)
    circ.cz(0, 1)
    circ.h(0)
    circ.h(1)
    circ.barrier()

    return circ

def simulate_quantum_circuit(circ):
    states = {'00': 0, '01': 0, '10': 0, '11': 0}
    circ.measure_all()

    simulator = Aer.get_backend('aer_simulator')
    circ = transpile(circ, simulator)
    result = simulator.run(circ).result()
    counts = result.get_counts(circ)

    states.update(counts)

    return states

def plot_quantum_circuit(grimoire):
    circ = create_quantum_circuit(grimoire)
    circ.draw("mpl")

    counts = simulate_quantum_circuit(circ)
    plot_histogram(counts, title="Repartition")

# Example usage
plot_quantum_circuit(1)
plot_quantum_circuit(2)
plot_quantum_circuit(3)
plot_quantum_circuit(4)
